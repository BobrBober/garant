import telebot
from telebot import types
import uuid
import random

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7285035799:AAENtYsuRHh8Y0AoI0CB0kL7iwUUwnSCTc0"

bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
deals = {}
users = {}
user_profiles = {}
referrals = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_referral_link(user_id):
    referral_code = str(uuid.uuid4())[:8]
    return f"https://t.me/ramlina_bot?start={referral_code}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è)
def handle_referral(new_user_id, referral_code):
    for user_id, user_data in user_profiles.items():
        if user_data.get("referral_code") == referral_code:
            user_profiles[user_id]["referrals"] += 1
            user_profiles[new_user_id]["invited_by"] = user_id
            user_profiles[user_id]["earned"] += 5  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5 USDT –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

            # –ù–∞—á–∏—Å–ª—è–µ–º –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if user_profiles[user_id]["invited_by"]:
                inviter_of_inviter = user_profiles[user_id]["invited_by"]
                user_profiles[inviter_of_inviter]["second_level_referrals"] += 1
                user_profiles[inviter_of_inviter]["earned"] += 2  # –ù–∞–ø—Ä–∏–º–µ—Ä, 2 USDT –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            break

# –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
def fake_payment(amount):
    return True

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (OTP)
def send_otp(user_id):
    otp = random.randint(100000, 999999)
    user_profiles[user_id]['otp'] = otp
    bot.send_message(user_id, f"–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (OTP): {otp}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
@bot.message_handler(commands=['start'])
def start(message):
    args = message.text.split()

    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = message.from_user.username
        user_profiles[user_id] = {
            'username': message.from_user.username,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'balance': {'RUB': 0, 'USDT': 0},
            'active_deals': [],
            'completed_deals': [],
            'deal_stats': {'total': 0, 'successful': 0, 'failed': 0},
            'commission': 3,
            'referrals': 0,
            'earned': 0,
            'referral_code': generate_referral_link(user_id),
            'invited_by': None,  # –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
            'second_level_referrals': 0,  # –†–µ—Ñ–µ—Ä–∞–ª—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
        }

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if len(args) > 1:
            referral_code = args[1]
            handle_referral(user_id, referral_code)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton("üíº –°–¥–µ–ª–∫–∏"))
    keyboard.add(types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"), types.KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"))

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bleeze GARANT! üíº\n\n"
        "ü§ù –ß–µ—Å—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –±–µ–∑ —Ä–∏—Å–∫–∞. –£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫! üí∏\n\n"
        "–ñ–º–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
        reply_markup=keyboard
    )

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.from_user.id
    profile_info = user_profiles.get(user_id)
    if profile_info:
        balance = profile_info['balance']
        stats = profile_info['deal_stats']
        commission = profile_info['commission']
        referral_link = profile_info['referral_code']

        profile_text = (
            f"üåü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
            f"üìå –ö–æ–º–∏—Å—Å–∏—è —Å–¥–µ–ª–æ–∫: {commission}%\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å:\n"
            f"‚îó {balance['RUB']} RUB –∏ {balance['USDT']} USDT\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            f"üé≠ –ö–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫: {stats['total']}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['successful']} RUB\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['failed']} RUB\n"
            f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: 0 RUB –∏ 0 USDT\n"
            f"üíµ –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: 0 RUB –∏ 0 USDT\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}"
        )

        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="replenish"),
            types.InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥", callback_data="withdraw"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        bot.send_message(message.chat.id, profile_text, reply_markup=keyboard)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == "replenish")
def replenish(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    bot.register_next_step_handler(call.message, process_replenishment)

def process_replenishment(message):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        user_profiles[user_id]['balance']['RUB'] += amount
        bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")

# –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å OTP
@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw(call):
    send_otp(call.message.chat.id)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ OTP –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:")
    bot.register_next_step_handler(call.message, confirm_withdraw)

def confirm_withdraw(message):
    user_id = message.from_user.id
    otp_input = message.text
    if otp_input == str(user_profiles[user_id].get('otp')):
        bot.send_message(message.chat.id, "OTP –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")
        bot.register_next_step_handler(message, process_withdrawal)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π OTP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_withdrawal(message):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        if user_profiles[user_id]['balance']['RUB'] >= amount:
            user_profiles[user_id]['balance']['RUB'] -= amount
            bot.send_message(message.chat.id, f"–í–∞—à –≤—ã–≤–æ–¥ –Ω–∞ {amount} RUB —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
@bot.message_handler(func=lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
def referral_info(message):
    user_id = message.from_user.id
    profile_info = user_profiles.get(user_id)
    if profile_info:
        referral_count = profile_info['referrals']
        second_level_count = profile_info['second_level_referrals']
        earned = profile_info['earned']

        # –£—Ä–æ–≤–Ω–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if referral_count > 20:
            commission = 0
        elif referral_count > 15:
            commission = 1.0
        elif referral_count > 10:
            commission = 1.5
        elif referral_count > 5:
            commission = 2.0
        else:
            commission = 2.5

        user_profiles[user_id]['commission'] = commission

        referral_text = (
            "üìå Bleeze GARANT - –±–æ—Ç –¥–ª—è —á–µ—Å—Ç–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n"
            "–ö–æ–º–∏—Å—Å–∏—è –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
            "1-5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 2.5%\n"
            "5-10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 2.0%\n"
            "10-15 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 1.5%\n"
            "15-20 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 1.0%\n"
            "20+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 0%\n\n"
            f"üåü –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_count}\n"
            f"üåü –†–µ—Ñ–µ—Ä–∞–ª—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è: {second_level_count}\n"
            f"üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned} RUB"
        )

        bot.send_message(message.chat.id, referral_text)

# –°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üíº –°–¥–µ–ª–∫–∏")
def deal_history(message):
    user_id = message.from_user.id
    active_deals = user_profiles[user_id]['active_deals']
    completed_deals = user_profiles[user_id]['completed_deals']

    deals_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n"
    for deal in active_deals:
        deals_text += f"#{deal['id']}: –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{deal['buyer']} - {deal['amount']} USDT\n"

    deals_text += "\n–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n"
    for deal in completed_deals:
        deals_text += f"#{deal['id']}: –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{deal['buyer']} - {deal['amount']} USDT\n"

    bot.send_message(message.chat.id, deals_text)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@bot.message_handler(func=lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
def create_deal(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (USDT):")
    bot.register_next_step_handler(message, process_create_deal)

def process_create_deal(message):
    try:
        amount = float(message.text)
        user_id = message.from_user.id

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ user_profiles
        if user_id not in user_profiles:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start.")
            return

        deal_id = len(deals) + 1
        deals[deal_id] = {
            'id': deal_id,
            'seller': user_profiles[user_id]['username'],
            'amount': amount,
            'buyer': None,
            'status': '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
        }

        user_profiles[user_id]['active_deals'].append(deals[deal_id])

        bot.send_message(message.chat.id, f"–°–¥–µ–ª–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å—É–º–º—É {amount} USDT.")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler(message, confirm_buyer, deal_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")

def confirm_buyer(message, deal_id):
    buyer_username = message.text
    deal = deals[deal_id]
    deal['buyer'] = buyer_username

    bot.send_message(message.chat.id, f"–°–¥–µ–ª–∫–∞ #{deal_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç @{buyer_username}.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for user_id, user_data in users.items():
        if user_data == buyer_username:
            bot.send_message(user_id, f"–°–¥–µ–ª–∫–∞ #{deal_id} –Ω–∞ —Å—É–º–º—É {deal['amount']} USDT. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É.", reply_markup=create_confirmation_keyboard(deal_id))

def create_confirmation_keyboard(deal_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"deal_confirm_{deal_id}"))
    return keyboard

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥
@bot.callback_query_handler(func=lambda call: call.data.startswith("deal_confirm_"))
def confirm_deal(call):
    deal_id = int(call.data.split("_")[2])
    deal = deals.get(deal_id)
    if deal:
        if deal['status'] == '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ':
            deal['status'] = '–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'
            bot.send_message(call.message.chat.id, f"–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É #{deal_id}, –æ–∂–∏–¥–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
        elif deal['status'] == '–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è':
            deal['status'] = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            bot.send_message(call.message.chat.id, f"–°–¥–µ–ª–∫–∞ #{deal_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏.")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
            seller_id = next(user_id for user_id, data in users.items() if data == deal['seller'])
            user_profiles[seller_id]['deal_stats']['successful'] += 1
            bot.send_message(call.message.chat.id, "–û—Ü–µ–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É –æ—Ç 1 –¥–æ 5:")
            bot.register_next_step_handler(call.message, process_deal_rating, deal_id)

def process_deal_rating(message, deal_id):
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}!")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        else:
            bot.send_message(message.chat.id, "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
